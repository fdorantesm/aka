package cmd

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/tabwriter"
)

func getAkaDir() string {
	home, err := os.UserHomeDir()
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error obtaining home directory:", err)
		os.Exit(1)
	}
	akaDir := filepath.Join(home, ".aka")
	if _, err := os.Stat(akaDir); os.IsNotExist(err) {
		if err := os.Mkdir(akaDir, 0755); err != nil {
			fmt.Fprintln(os.Stderr, "Error creating", akaDir+":", err)
			os.Exit(1)
		}
	}
	return akaDir
}

func addAlias(akaDir, aliasName, command string) error {
	filePath := filepath.Join(akaDir, aliasName+".alias")
	return os.WriteFile(filePath, []byte(command+"\n"), 0644)
}

func listAliases(akaDir string) error {
	entries, err := os.ReadDir(akaDir)
	if err != nil {
		return err
	}
	w := tabwriter.NewWriter(os.Stdout, 0, 0, 2, ' ', 0)
	fmt.Fprintln(w, "ALIAS\tCOMMAND")
	fmt.Fprintln(w, "-----\t-------")
	for _, entry := range entries {
		if !entry.IsDir() && strings.HasSuffix(entry.Name(), ".alias") {
			aliasName := strings.TrimSuffix(entry.Name(), ".alias")
			content, err := os.ReadFile(filepath.Join(akaDir, entry.Name()))
			if err != nil {
				return err
			}
			cmdStr := strings.TrimSpace(string(content))
			fmt.Fprintf(w, "%s\t%s\n", aliasName, cmdStr)
		}
	}
	w.Flush()
	return nil
}

func applyAliases(akaDir string) error {
	entries, err := os.ReadDir(akaDir)
	if err != nil {
		return err
	}
	fmt.Println("# Aliases generated by aka")
	for _, entry := range entries {
		if !entry.IsDir() && strings.HasSuffix(entry.Name(), ".alias") {
			aliasName := strings.TrimSuffix(entry.Name(), ".alias")
			filePath := filepath.Join(akaDir, entry.Name())
			content, err := os.ReadFile(filePath)
			if err != nil {
				return err
			}
			cmd := strings.TrimSpace(string(content))
			fmt.Printf("%s() {\n    %s\n}\n\n", aliasName, cmd)
		}
	}
	return nil
}

func exportAliases(akaDir, outFile string) error {
	entries, err := os.ReadDir(akaDir)
	if err != nil {
		return err
	}
	data := make(map[string]string)
	for _, entry := range entries {
		if entry.IsDir() || !strings.HasSuffix(entry.Name(), ".alias") {
			continue
		}
		aliasName := strings.TrimSuffix(entry.Name(), ".alias")
		content, err := os.ReadFile(filepath.Join(akaDir, entry.Name()))
		if err != nil {
			return err
		}
		data[aliasName] = strings.TrimSpace(string(content))
	}
	jsonBytes, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		return err
	}
	if outFile == "" {
		fmt.Println(string(jsonBytes))
		return nil
	}
	return os.WriteFile(outFile, jsonBytes, 0644)
}

func importAliases(akaDir, inFile string) error {
	content, err := os.ReadFile(inFile)
	if err != nil {
		return err
	}
	aliases := make(map[string]string)
	if err := json.Unmarshal(content, &aliases); err != nil {
		return err
	}
	for name, cmd := range aliases {
		if err := addAlias(akaDir, name, cmd); err != nil {
			return err
		}
	}
	return nil
}
